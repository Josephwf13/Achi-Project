#count of how many pieces each player has
piece_count = 8

#tracking the values of each section of the board 
board = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#keeps track of what spaces on the board are available
open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#used to stop the game once it is set to true
game_won = False

#tracks the possible moveable pieces, currently empty until the game comes to a tie
moveable_pieces = []

#used later on to track the last remaining spot when the game comes to a tie
last_spot = False

#displays board
def display_board():
    print("[" + str(board[0]) + "]-[" + str(board[1]) + "]-[" + str(board[2]) + "]")
    print("|  \\ | /  |")
    print("[" + str(board[3]) + "]-[" + str(board[4]) + "]-[" + str(board[5]) + "]")
    print("|  / | \\  |")
    print("[" + str(board[6]) + "]-[" + str(board[7]) + "]-[" + str(board[8]) + "]")


#adds the piece to the board and removes it from the open spots list       
def add_piece(choice, symbol):
    for i in (open_spots):
        global piece_count
        if choice == i:
            board[choice - 1] = symbol
            open_spots.remove(choice)
            piece_count -= 1
    #print(piece_count)

#chooses the players next move, and doesn't allow for spots that are already full
def player_move(symbol, player):
    player_choice = int(input("\nChoose a Space Player " + str(player) + "\n"))
    while not player_choice in open_spots:
        player1_choice = int(input("\nChoose an Available Space Player " + str(player) + "\n"))
    add_piece(player_choice, symbol)


def check_win():
    global game_won
    if board[0] == board[1] and board[1] == board[2]:
        game_won = True
    if board[3] == board[4] and board[4] == board[5]:
        game_won = True
    if board[6] == board[7] and board[7] == board[8]:
        game_won = True
    if board[0] == board[3] and board[3] == board[6]:
        game_won = True
    if board[1] == board[4] and board[4] == board[7]:
        game_won = True
    if board[2] == board[5] and board[5] == board[8]:
        game_won = True
    if board[0] == board[4] and board[4] == board[8]:
        game_won = True
    if board[2] == board[4] and board[4] == board[6]:
        game_won = True

#--------------------------------------------------------------------------------Achi Code Starts Here

# this function is responsible for finding and executing the possible moves a player can do
def achi_move(symbol, player):
    global board
    global last_spot
    print("\n",last_spot, "is the last spot\n")
    player_moveable_pieces = []
    for i in moveable_pieces:
        if board[i - 1] == symbol:
            player_moveable_pieces.append(i)
    print("You can move one of these pieces ", player_moveable_pieces, "\n")
    achi_choice = int(input("Which of your pieces will you move Player " + str(player) + str("\n")))
    while not achi_choice in player_moveable_pieces:
        achi_choice = int(input("\nChoose a moveable piece\n"))
    board[achi_choice - 1] = achi_choice
    board[last_spot - 1] = symbol
    print("------------------------------------\n")
    display_board()
    
# this function keeps track of the last empty spot and creates a list of the possible pieces that could be moved by either of the players   
def find_last_spot(b):
    global last_spot
    global moveable_pieces
    for i in b:
        for n in range(1,10):
            if i == n:
                last_spot = i
    if last_spot == 1:
        moveable_pieces = [2, 4, 5]
    if last_spot == 2:
        moveable_pieces = [1, 3, 5]
    if last_spot == 3:
        moveable_pieces = [2, 5, 6]
    if last_spot == 4:
        moveable_pieces = [1, 5, 7]
    if last_spot == 5:
        moveable_pieces = [1, 2, 3, 4, 6, 7, 8, 9]
    if last_spot == 6:
        moveable_pieces = [3, 5, 9]
    if last_spot == 7:
        moveable_pieces = [4, 5, 8]
    if last_spot == 8:
        moveable_pieces = [5, 7, 9]
    if last_spot == 9:
        moveable_pieces = [5, 6, 8]

#this function runs the game as a whole
def run_game():
    while piece_count > 0 and game_won == False:
        display_board()
        player_move("X", 1)
        print("-------------------------\n")
        check_win()
        if game_won == True:
            print("\nPlayer 1 wins")
        else: 
            display_board()
            player_move("O", 2)
            check_win()
            if game_won == True:
                print("\nPlayer 2 wins")
    display_board()
    #----------------------------------------everything below this point in the function is for the Achi moves
    while game_won == False and piece_count == 0:
        find_last_spot(board)
        achi_move("X", 1)
        check_win()
        if game_won == True:
            print("\nPlayer 1 wins")
        else:
            find_last_spot(board)
            achi_move("O", 2)
            check_win()
            if game_won == True:
                print("\nPlayer 2 wins")


run_game()

























